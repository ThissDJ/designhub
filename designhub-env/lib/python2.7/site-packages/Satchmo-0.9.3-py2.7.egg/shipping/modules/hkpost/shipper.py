"""
This dummy module can be used as a basis for creating your own

- Copy this module to a new name
- Make the changes described below
"""

# Note, make sure you use decimal math everywhere!
from decimal import Decimal
from django.utils.translation import ugettext as _
from shipping.modules.base import BaseShipper
from livesettings import config_value
class Shipper(BaseShipper):

    flatRateFee = Decimal("15.00")
    id = "HKPost"
        
    def __str__(self):
        """
        This is mainly helpful for debugging purposes
        """
        return "Varying Rate"
        
    def description(self):
        """
        A basic description that will be displayed to the user when selecting their shipping options
        """
        return _("HongKong Post Shipping")

    def calculate(self, cart, contact):
        """
        Based on the destination, the shipping fee varies
        """
        from satchmo_store.shop.models import Config
        shop_details = Config.objects.get_current()
#        shippingdata = {
#            'contact': contact,
#            'cart': cart,
#            'shipping_address' : shop_details,
#            'shipping_phone' : shop_details.phone,
#            'shipping_country_code' : shop_details.country.iso2_code
#            }
#        from l10n.models import CONTINENTS
#        self.country = contact.shipping_address.country.iso2_code
#        self.continent = [v for k,v in CONTINENTS if k == shop_details.country.continent][0]
        
        self.cart = cart
        self.contact = contact
        self._calculated = True

    def cost(self):
        """
        Complex calculations can be done here as long as the return value is a decimal figure
        """
        assert(self._calculated)
        for cartitem in self.cart.cartitem_set.all():
            if cartitem.product.is_shippable:
                if self.contact.shipping_address.country.iso2_code != 'HK':
                    if self.contact.shipping_address.country.continent == 'AS':
                        return config_value('SHIPPING', 'RATE_Asia')
                    elif self.contact.shipping_address.country.continent == 'NA':
                        return config_value('SHIPPING', 'RATE_NorthAmerica')
                    elif self.contact.shipping_address.country.continent == 'SA':
                        return config_value('SHIPPING', 'RATE_SouthAmerica')
                    elif self.contact.shipping_address.country.continent == 'EU':
                        return config_value('SHIPPING', 'RATE_Europe')
                    elif self.contact.shipping_address.country.continent == 'AF':
                        return config_value('SHIPPING', 'RATE_Africa')
                    elif self.contact.shipping_address.country.continent == 'OC':
                        return config_value('SHIPPING', 'RATE_Oceania')
                    elif self.contact.shipping_address.country.continent == 'AN':
                        return config_value('SHIPPING', 'RATE_Antarctica')
        return Decimal("0.00")

    def method(self):
        """
        Describes the actual delivery service (Mail, FedEx, DHL, UPS, etc)
        """
        return _("HongKong Post")

    def expectedDelivery(self):
        """
        Can be a plain string or complex calcuation returning an actual date
        """
        return _("3 - 4 business days")

    def valid(self, order=None):
        """
        Can do complex validation about whether or not this option is valid.
        For example, may check to see if the recipient is in an allowed country
        or location.
        """
        return True

